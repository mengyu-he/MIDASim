tinytex::install_tinytex()
devtools::install_github("yijuanhu/LOCOM")
install.packages("LOCOM")
lm = lm(Y ~ Z + A)
?predict
?predict.lm
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
n.sim = 1000
psi1 <- psi2 <- NULL
i = 1
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
mean(psi1)
mean(psi2)
mean(Y)
sum1
sum2
sum0
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
n.sim = 1000
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
# Advanced Causal Inference
# Question 5
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
set.seed(1)
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
# Advanced Causal Inference
# Question 5
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
set.seed(1)
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
# Advanced Causal Inference
# Question 5
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
set.seed(111)
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
# Advanced Causal Inference
# Question 5
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
set.seed(111)
nsim = 1000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
# Advanced Causal Inference
# Question 5
n = 50
pA = 0.3
eMA = 0.5
eYM = 0.8
eZM = 1
set.seed(111)
nsim = 5000
psi1 <- psi2 <- NULL
for (i in 1:nsim) {
A = rbinom(n, size = 1, prob = pA)
M = rnorm(n, mean = 3 + A*eMA, sd = 1)
Y = rnorm(n, mean = 1 + M*eYM, sd = 1)
Z = rnorm(n, mean = 2 + M*eZM, sd = 1)
sum1 = sum(A); sum0 = sum(A==0)
psi1[i] = sum( ifelse(A==1, Y/sum1, -Y/sum0 ) )
lmfit = lm(Y ~ Z + A)
pred1 = predict(lmfit, new = data.frame(Z = Z, A = 1))
pred2 = predict(lmfit, new = data.frame(Z = Z, A = 0))
psi2[i] = mean(pred1 - pred2)
}
mean(psi1)
mean(psi2)
library(stringr)
library(LTN)
library(readr)
tax = read_delim("~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/microbiome_Archive/biom/silva_taxonomy.tsv",
delim = "\t", escape_double = FALSE, trim_ws = TRUE)
# split the taxa names by semicolon delimiter
taxa_split  = lapply(tax$Taxon, function(x) gsub("D_\\d+__", "", unlist(strsplit(x, ";"))))
# create a data frame with the desired columns
taxa_df = data.frame(kingdom = sapply(taxa_split, function(x) if(length(x) >= 1) x[1] else NA),
phylum = sapply(taxa_split, function(x) if(length(x) >= 2) x[2] else NA),
class = sapply(taxa_split, function(x) if(length(x) >= 3) x[3] else NA),
order = sapply(taxa_split, function(x) if(length(x) >= 4) x[4] else NA),
family = sapply(taxa_split, function(x) if(length(x) >= 5) x[5] else NA),
genus = sapply(taxa_split, function(x) if(length(x) >= 6) x[6] else NA),
stringsAsFactors = FALSE)
dim(taxa_df)
# build a tree based on taxonomy table
tree_silva = tax_tree(taxa_df)
tree
otu3 = load("~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/otu3.RData")
dim(otu3)
otu3
otu3 = data("~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/otu3.RData")
load("~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/otu3.RData")
dim(otu3)
tax = read_delim("~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/microbiome_Archive/biom/silva_taxonomy.tsv",
delim = "\t", escape_double = FALSE, trim_ws = TRUE)
tax = tax[tax$`Feature ID` %in% rownames(otu3), ]
dim(tax)
taxa_split  = lapply(tax$Taxon, function(x) gsub("D_\\d+__", "", unlist(strsplit(x, ";"))))
# create a data frame with the desired columns
taxa_df = data.frame(kingdom = sapply(taxa_split, function(x) if(length(x) >= 1) x[1] else NA),
phylum = sapply(taxa_split, function(x) if(length(x) >= 2) x[2] else NA),
class = sapply(taxa_split, function(x) if(length(x) >= 3) x[3] else NA),
order = sapply(taxa_split, function(x) if(length(x) >= 4) x[4] else NA),
family = sapply(taxa_split, function(x) if(length(x) >= 5) x[5] else NA),
genus = sapply(taxa_split, function(x) if(length(x) >= 6) x[6] else NA),
stringsAsFactors = FALSE)
View(taxa_df)
# build a tree based on taxonomy table
tree_silva = tax_tree(taxa_df)
save(tree_silva, file = "~/Library/CloudStorage/OneDrive-EmoryUniversity/pdf/Hope/tree_silva.RData")
glm(c(1,1,0,0,0,0) ~ c(0,0,0,0,0,0), family = "binomial")
glm(c(1,1,0,0,0,0) ~ c(1,1,0,0,0,0), family = "binomial")
glm(c(1,1,0,0,0,0) ~ c(1,1,1,0,0,0), family = "binomial")
devtools::install_github("mengyu-he/MIDAS")
devtools::install_github("mengyu-he/MIDAS", build = T)
setwd("~/OneDrive - Emory University/github/MIDAS")
build()
library(devtools)
build()
devtools::install_github("mengyu-he/MIDAS", build = T)
devtools::install_github("mengyu-he/MIDAS", build = F)
devtools::document()
devtools::install_github("mengyu-he/MIDAS")
library(MIDAS)
